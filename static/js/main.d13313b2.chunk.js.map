{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactItem/ContactItem.module.css","redux/contact-actions.js","redux/contact-operations.js","components/ContactForm/ContactForm.js","redux/contact-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contact-reducer.js","redux/contact-store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","ContactForm","dispatch","useDispatch","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","className","styles","form","onSubmit","preventDefault","data","id","shortid","generate","contactsActions","post","then","catch","error","message","input","type","pattern","title","required","onChange","button","getFilteredContacts","createSelector","state","contacts","items","filter","normalizedFilter","toLowerCase","contact","includes","ContactList","useSelector","contactsSelectors","useEffect","get","map","onClick","delete","contactsOperations","Filter","label","contactActions","App","isLoading","contactSelectors","getError","createReducer","_","payload","matching","find","alert","combineReducers","store","configureStore","reducer","contactReducers","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d13313b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__31Kit\",\"label\":\"Filter_label__1D5LI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactItem_button__3K5c1\"};","// import shortid from \"shortid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\n// fetchContact\n\nexport const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\nexport const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\nexport const fetchContactError = createAction(\"contacts/fetchContactError\");\n\n// addContact\n\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\nexport const addContactError = createAction(\"contacts/addContactError\");\n\n// deleteContact\n\nexport const deleteContactRequest = createAction(\n  \"contacts/deleteContactRequest\"\n);\nexport const deleteContactSuccess = createAction(\n  \"contacts/deleteContactSuccess\"\n);\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\n\n// filterContact\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n","import * as contactsActions from \"./contact-actions\";\n// import * as contactsAPI from \"../components/contact-api\";\n\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3004\";\nexport const fetchContacts = () => (dispatch) => {\n  dispatch(contactsActions.fetchContactRequest());\n  axios\n    .get(\"/contacts\")\n    .then(({ data }) => dispatch(contactsActions.fetchContactSuccess(data)))\n    .catch((error) =>\n      dispatch(contactsActions.fetchContactError(error.message))\n    );\n};\n\nexport const addContact = (data) => (dispatch) => {\n  dispatch(contactsActions.addContactRequest());\n  axios\n    .post(\"/contacts\", data)\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\n    .catch((error) => dispatch(contactsActions.addContactError(error.message)));\n};\n\nexport const deleteContact = (id) => (dispatch) => {\n  dispatch(contactsActions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\n    .catch((error) =>\n      dispatch(contactsActions.deleteContactError(error.message))\n    );\n};\n\n// export const fetchContacts = () => async (dispatch) => {\n//   dispatch(contactsActions.fetchContactRequest());\n\n//   try {\n//     const contacts = await contactsAPI.fetchContacts();\n//     dispatch(contactsActions.fetchContactSuccess(contacts));\n//   } catch (error) {\n//     dispatch(contactsActions.fetchContactError(error));\n//   }\n// };\n\n// export const addContact = (data) => async (dispatch) => {\n//   dispatch(contactsActions.addContactRequest());\n\n//   try {\n//     const addContact = await contactsAPI.addContacts(data);\n//     dispatch(contactsActions.addContactSuccess(addContact));\n//   } catch (error) {\n//     dispatch(contactsActions.addContactError(error.message));\n//   }\n// };\n\n// export const deleteContact = (id) => async (dispatch) => {\n//   dispatch(contactsActions.addContactRequest());\n\n//   try {\n//     const deleteContact = await contactsAPI.deleteContacts(id);\n//     dispatch(contactsActions.deleteContactSuccess(deleteContact));\n//   } catch (error) {\n//     dispatch(contactsActions.deleteContactError(error.message));\n//   }\n// };\n","import { useState } from \"react\";\nimport shortid from \"shortid\";\nimport styles from \"../ContactForm/ContactForm.module.css\";\n// import * as contactActions from \"../../redux/contact-actions\";\nimport { useDispatch /*useSelector*/ } from \"react-redux\";\nimport * as contactOperations from \"../../redux/contact-operations\";\n// import { addContact } from \"../../redux/contact-actions\";\n// import * as contactsSelectors from \"../../redux/contact-selectors\";\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  // const nameInputId = () => shortid.generate();\n  // const numberInputId = () => shortid.generate();\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const id = shortid.generate();\n    dispatch(contactOperations.addContact({ id, name, number }));\n\n    resetForm();\n  };\n\n  function resetForm() {\n    setName(\"\");\n    setNumber(\"\");\n  }\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label /*htmlFor={nameInputId}*/>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          // id={nameInputId}\n        />\n      </label>\n      <br />\n      <label /*htmlFor={numberInputId}*/>\n        Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n          // id={numberInputId}\n        />\n      </label>\n      <br />\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\nexport const getLoading = (state) => state.contacts.isLoading;\nexport const getError = (state) => state.contacts.getError;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\n// export const getFilteredContacts = (state) => {\n//   const { filter, items } = state.contacts;\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return items.filter((contact) =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n","import React, { useEffect } from \"react\";\nimport styles from \"../ContactList/ContactItem/ContactItem.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import { deleteContact } from \"../../redux/contact-actions\";\nimport * as contactsSelectors from \"../../redux/contact-selectors\";\nimport * as contactsOperations from \"../../redux/contact-operations\";\n// import * as contactActions from \"../../redux/contact-actions\";\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(contactsSelectors.getFilteredContacts);\n  // const onDeleteContact = (id) =>\n  //   dispatch(contactsOperations.deleteContact(id));\n\n  // const getContactList = (state) => {\n  //   const { filter, items } = state.contacts;\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return items.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            {name}: {number}\n            <button\n              className={styles.button}\n              type=\"button\"\n              onClick={() => dispatch(contactsOperations.deleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// import React from \"react\";\nimport styles from \"../Filter/Filter.module.css\";\nimport { useDispatch /*useSelector*/ } from \"react-redux\";\nimport * as contactActions from \"../../redux/contact-actions\";\n// import * as contactSelectors from \"../../redux/contact-selectors\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const onChangeFilter = (e) =>\n    dispatch(contactActions.changeFilter(e.currentTarget.value));\n\n  // const filter = useSelector(contactSelectors.getFilter);\n\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        className={styles.input}\n        // value={filter}\n        type=\"text\"\n        onChange={onChangeFilter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useSelector } from \"react-redux\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nimport * as contactSelectors from \"./redux/contact-selectors\";\n\nfunction App() {\n  const isLoading = useSelector((state) => contactSelectors.getLoading(state));\n  const error = useSelector((state) => contactSelectors.getError(state));\n  // const filter = useSelector(state => contactSelectors.getFilteredContacts(state))\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <Filter />\n      <h2>Contacts</h2>\n      {error && <h2>Something went wrong</h2>}\n      {isLoading && <h2>Loading...</h2>}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as contactActions from \"./contact-actions\";\n\nconst items = createReducer([], {\n  [contactActions.fetchContactSuccess]: (_, { payload }) => payload,\n  [contactActions.addContactSuccess]: (state, { payload }) => {\n    const matching = state.find(\n      (contact) => contact.name.toLowerCase() === payload.name.toLowerCase()\n    );\n    if (matching) {\n      alert(`${matching.name} is already in contacts.`);\n      return;\n    }\n    return [...state, payload];\n  },\n  [contactActions.deleteContactSuccess]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [contactActions.changeFilter]: (state, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [contactActions.fetchContactRequest]: () => true,\n  [contactActions.fetchContactSuccess]: () => false,\n  [contactActions.fetchContactError]: () => false,\n  [contactActions.addContactRequest]: () => true,\n  [contactActions.addContactSuccess]: () => false,\n  [contactActions.addContactError]: () => false,\n  [contactActions.deleteContactRequest]: () => true,\n  [contactActions.deleteContactSuccess]: () => false,\n  [contactActions.deleteContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  isLoading,\n});\n","import { configureStore /*getDefaultMiddleware*/ } from \"@reduxjs/toolkit\";\n// import {\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from \"redux-persist\";\nimport contactReducers from \"./contact-reducer\";\n// import logger from \"redux-logger\";\n// import storage from \"redux-persist/lib/storage\";\n\n// const contactsPersistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactReducers,\n  },\n  // middleware: getDefaultMiddleware({\n  //   serializableCheck: {\n  //     ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n  //   },\n  // }),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\n// const persistor = persistStore(store);\n// const persistore = { store, persistor };\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport store from \"./redux/contact-store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__uHZYD\",\"input\":\"ContactForm_input__3cILg\",\"button\":\"ContactForm_button__Jj1pW\"};"],"sourceRoot":""}